module OligoDesigner.SpecAlgo where

import Test.Hspec (Spec, describe, shouldBe, it, shouldNotBe)
import Bio.Tools.Sequence.OligoDesigner.Algo (designOligsAA, getRandomSeed, designOligsDNA)
import Bio.Tools.Sequence.CodonOptimization.Types (Organism(..), CodonOptimizationConfig(..), defaultForbiddenRegexp)
import Bio.Tools.Sequence.OligoDesigner.Types (OligsDesignerConfig(..), OligSet(..), OligSplitting(..), MatrixCell(..), Olig(..))
import Data.Default (def)
import Debug.Trace (trace)
import Bio.Tools.Sequence.OligoDesigner.Scorer (rnaMatrix, commonScore, rebuildMatrix)
import Control.Monad.Except (runExcept)
import Control.DeepSeq (force)
import Bio.Tools.Sequence.CodonOptimization (optimizeCodonForAA)
import Bio.Tools.Sequence.OligoDesigner.Optimizer.IterativeOptimizer (optimize)
import Control.Monad.State (evalState)
import Bio.Tools.Sequence.OligoDesigner.Optimizer.RNACofoldOptimizer (rnaOptimize)
import Bio.Tools.Sequence.OligoDesigner.Optimizer.GCContentOptimizer (gcContentOptimize)
import Bio.Tools.Sequence.OligoDesigner.Prettifier (prettyOligSet, prettyDNA)
import Data.Matrix (matrix)
import Bio.Tools.Sequence.OligoDesigner.Utils (mutate)

algoSpec :: Spec
algoSpec =
    describe "algoSpec" $ do
        designOligsAASpec
--        optCodonSpec
--        designOligsDNASpec
--        splitToOligsAndOptimizeSpec
--        splitToOligsAndRnaOptimizeSpec
--        splitToOligsAndGCContentOptimizer
--        splitToOligsAndRnaMatrix
--        rebuildMatrixSpec
--        mutateSpec

--56.9986 seconds = 26 codon optimization +  37 rnaOptimization
designOligsAASpec :: Spec
designOligsAASpec =
    describe "designOligsAASpec " $
    it "" $ do
        gen <- getRandomSeed 
        let conf = OligsDesignerConfig def def 0.7 0.3 0 1
        let aa = "ASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPKSCDRTHTCPPCPAPELLGGPSVFLFPPKPKDTLYITREPEVTCVVVDVSHEDPEVKFNWYVDGVEVHNAKTKPREEQYNSTYRVVSVLTVLHQDWLNGKEYKCKVSNKALPAPIEKTISKAKGQPREPQVYTLPPSRDELTKNQVSLTCLVKGFYPSDIAVEWESNGQPENNYKTTPPVLDSDGSFFLYSKLTVDKSRWQQGNVFSCSVMHEALHNHYTQKSLSLSPGK"
        let (Right res) = runExcept $ designOligsAA gen conf aa
        trace ("oligs:\n" ++ prettyOligSet res) $
            trace ("score:" ++ show(commonScore conf res)) $
            True `shouldBe` True

--26.2891 seconds
optCodonSpec :: Spec
optCodonSpec =
    describe "optSpec" $
    it "" $ do
        let aa = "ASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPKSCDRTHTCPPCPAPELLGGPSVFLFPPKPKDTLYITREPEVTCVVVDVSHEDPEVKFNWYVDGVEVHNAKTKPREEQYNSTYRVVSVLTVLHQDWLNGKEYKCKVSNKALPAPIEKTISKAKGQPREPQVYTLPPSRDELTKNQVSLTCLVKGFYPSDIAVEWESNGQPENNYKTTPPVLDSDGSFFLYSKLTVDKSRWQQGNVFSCSVMHEALHNHYTQKSLSLSPGK"
        let res = optimizeCodonForAA def aa
        trace ("res:" ++ prettyDNA res) $ res `shouldBe` ""

-- 3.2283 seconds
designOligsDNASpec :: Spec
designOligsDNASpec =
    describe "designOligsDNA" $
    it "" $ do
        let dna = "GCCAGCACCAAGGGCCCCAGCGTGTTTCCTCTGGCCCCTTCTTCTAAGTCTACCTCTGGCGGCACCGCCGCCCTGGGCTGTCTGGTGAAGGATTACTTCCCTGAGCCTGTGACCGTGTCTTGGAACTCTGGCGCCCTGACCTCTGGCGTGCACACCTTCCCTGCCGTGCTGCAGTCTTCTGGCCTGTACTCTCTGTCTTCTGTGGTGACCGTGCCTTCTTCTTCTCTGGGCACCCAGACCTACATCTGCAACGTGAACCACAAGCCTTCTAACACCAAGGTGGACAAGAAGGTGGAGCCTAAGTCTTGCGACAGAACCCACACCTGCCCTCCTTGCCCTGCCCCTGAGCTGCTGGGCGGCCCTTCTGTGTTTCTGTTCCCTCCTAAGCCTAAGGACACCCTGTACATCACCAGAGAGCCTGAGGTGACCTGCGTGGTGGTGGATGTGTCTCACGAGGACCCTGAGGTGAAGTTCAACTGGTACGTGGACGGCGTGGAGGTGCACAACGCTAAGACCAAGCCTAGAGAGGAGCAGTACAACTCTACCTACAGAGTGGTGTCTGTGCTGACCGTGCTGCACCAAGACTGGCTGAACGGCAAGGAGTACAAGTGCAAGGTGTCTAACAAGGCCCTGCCTGCCCCTATCGAGAAGACCATCTCTAAGGCCAAGGGCCAGCCTAGAGAGCCTCAAGTGTACACCCTGCCTCCTTCTAGAGACGAGCTGACCAAGAACCAAGTGTCTCTGACCTGCCTGGTGAAGGGCTTCTACCCTTCTGACATCGCCGTGGAGTGGGAGTCTAACGGCCAGCCTGAGAACAACTACAAGACCACCCCTCCTGTGCTGGACTCTGATGGCTCTTTCTTTCTGTACTCTAAGCTGACCGTGGACAAGTCTAGATGGCAGCAAGGCAACGTGTTCTCTTGCTCTGTGATGCACGAGGCCCTGCACAACCACTACACCCAGAAGTCTCTGTCTCTGTCTCCTGGCAAG"
        let conf = OligsDesignerConfig def def 0.7 0.3 0 1
        let (Right res) = runExcept $ designOligsDNA conf dna
        trace ("res:" ++ show res) $ res `shouldBe` OligSet [] [] (OligSplitting [] [])

--59.8474 seconds
splitToOligsAndOptimizeSpec :: Spec
splitToOligsAndOptimizeSpec =
    describe "splitToOligsAndOptimizeSpec" $
    it "" $ do
        gen <- getRandomSeed
        let dna = "GCCAGCACCAAGGGCCCCAGCGTGTTTCCTCTGGCCCCTTCTTCTAAGTCTACCTCTGGCGGCACCGCCGCCCTGGGCTGTCTGGTGAAGGATTACTTCCCTGAGCCTGTGACCGTGTCTTGGAACTCTGGCGCCCTGACCTCTGGCGTGCACACCTTCCCTGCCGTGCTGCAGTCTTCTGGCCTGTACTCTCTGTCTTCTGTGGTGACCGTGCCTTCTTCTTCTCTGGGCACCCAGACCTACATCTGCAACGTGAACCACAAGCCTTCTAACACCAAGGTGGACAAGAAGGTGGAGCCTAAGTCTTGCGACAGAACCCACACCTGCCCTCCTTGCCCTGCCCCTGAGCTGCTGGGCGGCCCTTCTGTGTTTCTGTTCCCTCCTAAGCCTAAGGACACCCTGTACATCACCAGAGAGCCTGAGGTGACCTGCGTGGTGGTGGATGTGTCTCACGAGGACCCTGAGGTGAAGTTCAACTGGTACGTGGACGGCGTGGAGGTGCACAACGCTAAGACCAAGCCTAGAGAGGAGCAGTACAACTCTACCTACAGAGTGGTGTCTGTGCTGACCGTGCTGCACCAAGACTGGCTGAACGGCAAGGAGTACAAGTGCAAGGTGTCTAACAAGGCCCTGCCTGCCCCTATCGAGAAGACCATCTCTAAGGCCAAGGGCCAGCCTAGAGAGCCTCAAGTGTACACCCTGCCTCCTTCTAGAGACGAGCTGACCAAGAACCAAGTGTCTCTGACCTGCCTGGTGAAGGGCTTCTACCCTTCTGACATCGCCGTGGAGTGGGAGTCTAACGGCCAGCCTGAGAACAACTACAAGACCACCCCTCCTGTGCTGGACTCTGATGGCTCTTTCTTTCTGTACTCTAAGCTGACCGTGGACAAGTCTAGATGGCAGCAAGGCAACGTGTTCTCTTGCTCTGTGATGCACGAGGCCCTGCACAACCACTACACCCAGAAGTCTCTGTCTCTGTCTCCTGGCAAG"
        let conf = OligsDesignerConfig def def 0.7 0.3 0 1
        let (Right oligs) = runExcept $ designOligsDNA conf dna
        let res = evalState (optimize conf oligs) gen
        res `shouldNotBe` oligs
        trace ("res:" ++ show res) $ True `shouldBe` True

--  31.2713 seconds
splitToOligsAndRnaOptimizeSpec :: Spec
splitToOligsAndRnaOptimizeSpec =
    describe "splitToOligsAndRnaOptimizeSpec" $
    it "" $ do
        gen <- getRandomSeed
        let dna = "GCCAGCACCAAGGGCCCCAGCGTGTTTCCTCTGGCCCCTTCTTCTAAGTCTACCTCTGGCGGCACCGCCGCCCTGGGCTGTCTGGTGAAGGATTACTTCCCTGAGCCTGTGACCGTGTCTTGGAACTCTGGCGCCCTGACCTCTGGCGTGCACACCTTCCCTGCCGTGCTGCAGTCTTCTGGCCTGTACTCTCTGTCTTCTGTGGTGACCGTGCCTTCTTCTTCTCTGGGCACCCAGACCTACATCTGCAACGTGAACCACAAGCCTTCTAACACCAAGGTGGACAAGAAGGTGGAGCCTAAGTCTTGCGACAGAACCCACACCTGCCCTCCTTGCCCTGCCCCTGAGCTGCTGGGCGGCCCTTCTGTGTTTCTGTTCCCTCCTAAGCCTAAGGACACCCTGTACATCACCAGAGAGCCTGAGGTGACCTGCGTGGTGGTGGATGTGTCTCACGAGGACCCTGAGGTGAAGTTCAACTGGTACGTGGACGGCGTGGAGGTGCACAACGCTAAGACCAAGCCTAGAGAGGAGCAGTACAACTCTACCTACAGAGTGGTGTCTGTGCTGACCGTGCTGCACCAAGACTGGCTGAACGGCAAGGAGTACAAGTGCAAGGTGTCTAACAAGGCCCTGCCTGCCCCTATCGAGAAGACCATCTCTAAGGCCAAGGGCCAGCCTAGAGAGCCTCAAGTGTACACCCTGCCTCCTTCTAGAGACGAGCTGACCAAGAACCAAGTGTCTCTGACCTGCCTGGTGAAGGGCTTCTACCCTTCTGACATCGCCGTGGAGTGGGAGTCTAACGGCCAGCCTGAGAACAACTACAAGACCACCCCTCCTGTGCTGGACTCTGATGGCTCTTTCTTTCTGTACTCTAAGCTGACCGTGGACAAGTCTAGATGGCAGCAAGGCAACGTGTTCTCTTGCTCTGTGATGCACGAGGCCCTGCACAACCACTACACCCAGAAGTCTCTGTCTCTGTCTCCTGGCAAG"
        let conf = OligsDesignerConfig def def 0.7 0.3 0 1
        let (Right oligs) = runExcept $ designOligsDNA conf dna
        let res = evalState (rnaOptimize conf oligs) gen
        trace ("res:" ++ show res) $ True `shouldBe` True

-- 0.0398 seconds
splitToOligsAndGCContentOptimizer :: Spec
splitToOligsAndGCContentOptimizer =
    describe "splitToOligsAndGCContentOptimizer" $
    it "" $ do
        gen <- getRandomSeed
        let dna = "GCCAGCACCAAGGGCCCCAGCGTGTTTCCTCTGGCCCCTTCTTCTAAGTCTACCTCTGGCGGCACCGCCGCCCTGGGCTGTCTGGTGAAGGATTACTTCCCTGAGCCTGTGACCGTGTCTTGGAACTCTGGCGCCCTGACCTCTGGCGTGCACACCTTCCCTGCCGTGCTGCAGTCTTCTGGCCTGTACTCTCTGTCTTCTGTGGTGACCGTGCCTTCTTCTTCTCTGGGCACCCAGACCTACATCTGCAACGTGAACCACAAGCCTTCTAACACCAAGGTGGACAAGAAGGTGGAGCCTAAGTCTTGCGACAGAACCCACACCTGCCCTCCTTGCCCTGCCCCTGAGCTGCTGGGCGGCCCTTCTGTGTTTCTGTTCCCTCCTAAGCCTAAGGACACCCTGTACATCACCAGAGAGCCTGAGGTGACCTGCGTGGTGGTGGATGTGTCTCACGAGGACCCTGAGGTGAAGTTCAACTGGTACGTGGACGGCGTGGAGGTGCACAACGCTAAGACCAAGCCTAGAGAGGAGCAGTACAACTCTACCTACAGAGTGGTGTCTGTGCTGACCGTGCTGCACCAAGACTGGCTGAACGGCAAGGAGTACAAGTGCAAGGTGTCTAACAAGGCCCTGCCTGCCCCTATCGAGAAGACCATCTCTAAGGCCAAGGGCCAGCCTAGAGAGCCTCAAGTGTACACCCTGCCTCCTTCTAGAGACGAGCTGACCAAGAACCAAGTGTCTCTGACCTGCCTGGTGAAGGGCTTCTACCCTTCTGACATCGCCGTGGAGTGGGAGTCTAACGGCCAGCCTGAGAACAACTACAAGACCACCCCTCCTGTGCTGGACTCTGATGGCTCTTTCTTTCTGTACTCTAAGCTGACCGTGGACAAGTCTAGATGGCAGCAAGGCAACGTGTTCTCTTGCTCTGTGATGCACGAGGCCCTGCACAACCACTACACCCAGAAGTCTCTGTCTCTGTCTCCTGGCAAG"
        let conf = OligsDesignerConfig def def 0.7 0.3 0 1
        let (Right oligs) = runExcept $ designOligsDNA conf dna
        let res = evalState (gcContentOptimize conf oligs) gen
        trace ("res:" ++ show res) $ True `shouldBe` True

--12.5620 seconds
splitToOligsAndRnaMatrix :: Spec
splitToOligsAndRnaMatrix =
    describe "splitToOligsAndRnaMatrix" $
    it "" $ do
         gen <- getRandomSeed
         let dna = "GCCAGCACCAAGGGCCCCAGCGTGTTTCCTCTGGCCCCTTCTTCTAAGTCTACCTCTGGCGGCACCGCCGCCCTGGGCTGTCTGGTGAAGGATTACTTCCCTGAGCCTGTGACCGTGTCTTGGAACTCTGGCGCCCTGACCTCTGGCGTGCACACCTTCCCTGCCGTGCTGCAGTCTTCTGGCCTGTACTCTCTGTCTTCTGTGGTGACCGTGCCTTCTTCTTCTCTGGGCACCCAGACCTACATCTGCAACGTGAACCACAAGCCTTCTAACACCAAGGTGGACAAGAAGGTGGAGCCTAAGTCTTGCGACAGAACCCACACCTGCCCTCCTTGCCCTGCCCCTGAGCTGCTGGGCGGCCCTTCTGTGTTTCTGTTCCCTCCTAAGCCTAAGGACACCCTGTACATCACCAGAGAGCCTGAGGTGACCTGCGTGGTGGTGGATGTGTCTCACGAGGACCCTGAGGTGAAGTTCAACTGGTACGTGGACGGCGTGGAGGTGCACAACGCTAAGACCAAGCCTAGAGAGGAGCAGTACAACTCTACCTACAGAGTGGTGTCTGTGCTGACCGTGCTGCACCAAGACTGGCTGAACGGCAAGGAGTACAAGTGCAAGGTGTCTAACAAGGCCCTGCCTGCCCCTATCGAGAAGACCATCTCTAAGGCCAAGGGCCAGCCTAGAGAGCCTCAAGTGTACACCCTGCCTCCTTCTAGAGACGAGCTGACCAAGAACCAAGTGTCTCTGACCTGCCTGGTGAAGGGCTTCTACCCTTCTGACATCGCCGTGGAGTGGGAGTCTAACGGCCAGCCTGAGAACAACTACAAGACCACCCCTCCTGTGCTGGACTCTGATGGCTCTTTCTTTCTGTACTCTAAGCTGACCGTGGACAAGTCTAGATGGCAGCAAGGCAACGTGTTCTCTTGCTCTGTGATGCACGAGGCCCTGCACAACCACTACACCCAGAAGTCTCTGTCTCTGTCTCCTGGCAAG"
         let conf = OligsDesignerConfig def def 0.7 0.3 0 1
         let (Right oligs) = runExcept $ designOligsDNA conf dna
         let res = rnaMatrix oligs
         trace ("res:" ++ show res) $ True `shouldBe` True

-- 1s
mutateSpec :: Spec
mutateSpec =
    describe "mutateSpec" $
    it "" $ do
        let dna = "GCCAGCACCAAGGGCCCCAGCGTGTTTCCTCTGGCCCCTTCTTCTAAGTCTACCTCTGGCGGCACCGCCGCCCTGGGCTGTCTGGTGAAGGATTACTTCCCTGAGCCTGTGACCGTGTCTTGGAACTCTGGCGCCCTGACCTCTGGCGTGCACACCTTCCCTGCCGTGCTGCAGTCTTCTGGCCTGTACTCTCTGTCTTCTGTGGTGACCGTGCCTTCTTCTTCTCTGGGCACCCAGACCTACATCTGCAACGTGAACCACAAGCCTTCTAACACCAAGGTGGACAAGAAGGTGGAGCCTAAGTCTTGCGACAGAACCCACACCTGCCCTCCTTGCCCTGCCCCTGAGCTGCTGGGCGGCCCTTCTGTGTTTCTGTTCCCTCCTAAGCCTAAGGACACCCTGTACATCACCAGAGAGCCTGAGGTGACCTGCGTGGTGGTGGATGTGTCTCACGAGGACCCTGAGGTGAAGTTCAACTGGTACGTGGACGGCGTGGAGGTGCACAACGCTAAGACCAAGCCTAGAGAGGAGCAGTACAACTCTACCTACAGAGTGGTGTCTGTGCTGACCGTGCTGCACCAAGACTGGCTGAACGGCAAGGAGTACAAGTGCAAGGTGTCTAACAAGGCCCTGCCTGCCCCTATCGAGAAGACCATCTCTAAGGCCAAGGGCCAGCCTAGAGAGCCTCAAGTGTACACCCTGCCTCCTTCTAGAGACGAGCTGACCAAGAACCAAGTGTCTCTGACCTGCCTGGTGAAGGGCTTCTACCCTTCTGACATCGCCGTGGAGTGGGAGTCTAACGGCCAGCCTGAGAACAACTACAAGACCACCCCTCCTGTGCTGGACTCTGATGGCTCTTTCTTTCTGTACTCTAAGCTGACCGTGGACAAGTCTAGATGGCAGCAAGGCAACGTGTTCTCTTGCTCTGTGATGCACGAGGCCCTGCACAACCACTACACCCAGAAGTCTCTGTCTCTGTCTCCTGGCAAG"
        gen <- getRandomSeed
        let res = evalState (concat <$> mapM (mutate CHO dna) [(261,270), (121,140), (151,170)]) gen
        trace (show $ map prettyDNA res) $ True `shouldBe` True

rebuildMatrixSpec :: Spec
rebuildMatrixSpec =
    describe "rebuildMatrixSpec" $
    it "" $ do
        let coords = OligSplitting [(0, 60), (60, 120)] [(30, 90), (90, 150)]
        let oligs =
                OligSet
                [ Olig "GCCAGCACCAAGGGCCCCAGCGTGTTTCCTCTGGCCCCTTCTTCTAAGTCTACCTCTGGC" 0 60
                , Olig "GGCACCGCCGCCCTGGGCTGTCTGGTGAAGGATTACTTCCCTGAGCCTGTGACCGTGTCT" 60 120
                , Olig "TGGAACTCTGGCGCCCTGACCTCTGGCGTGCACACCTTCCCTGCCGTGCTGCAGTCTTCT" 120 180
                , Olig "GGCCTGTACTCTCTGTCTTCTGTGGTGACCGTGCCTTCTTCTTCTCTGGGCACCCAGACC" 180 240
                , Olig "TACATCTGCAACGTGAACCACAAGCCTTCTAACACCAAGGTGGACAAGAAGGTGGAGCCT" 240 300
                , Olig "AAATCTTGCGACAGAACCCACACCTGCCCTCCTTGCCCTGCCCCTGAGCTGCTGGGCGGC" 300 360
                , Olig "CCTTCTGTGTTTCTGTTCCCTCCTAAGCCTAAGGACACCCTGTACATCACCAGAGAGCCT" 360 420
                , Olig "GAGGTGACCTGCGTGGTGGTGGATGTGTCTCACGAGGACCCTGAGGTGAAGTTCAACTGG" 420 480
                , Olig "TACGTGGACGGCGTGGAGGTGCACAACGCAAAGACCAAGCCTAGAGAGGAGCAGTACAAC" 480 540
                , Olig "TCTACCTACAGAGTGGTGTCTGTGCTGACCGTGCTGCACCAAGACTGGCTGAACGGCAAG" 540 600
                , Olig "GAGTACAAGTGCAAGGTGTCTAACAAGGCCCTGCCTGCCCCTATCGAGAAGACCATCTCT" 600 660
                , Olig "AAGGCCAAGGGCCAGCCTAGAGAGCCTCAAGTGTACACCCTGCCTCCTTCTAGAGACGAG" 660 720
                , Olig "CTGACCAAGAACCAAGTGTCTCTGACCTGCCTGGTGAAGGGCTTCTACCCTTCTGACATC" 720 780
                , Olig "GCCGTGGAGTGGGAGTCTAACGGCCAGCCTGAGAACAACTACAAGACCACCCCTCCTGTG" 780 840
                , Olig "CTGGACTCTGATGGCTCTTTCTTTCTGTACTCTAAGCTGACCGTGGACAAGTCTAGATGG" 840 900
                , Olig "CAGCAAGGCAACGTGTTCTCTTGCTCTGTGATGCACGAGGCCCTGCACAACCACTACACC" 900 960
                ]
                [ Olig "CTTCACCAGACAGCCCAGGGCGGCGGTGCCGCCAGAGGTAGACTTAGAAGAAGGGGCCAG" 30 90
                , Olig "CACGCCAGAGGTCAGGGCGCCAGAGTTCCAAGACACGGTCACAGGCTCAGGGAAGTAATC" 90 150
                , Olig "GGTCACCACAGAAGACAGAGAGTACAGGCCAGAAGACTGCAGCACGGCAGGGAAGGTGTG" 150 210
                , Olig "AGAAGGCTTGTGGTTCACGTTGCAGATGTAGGTCTGGGTGCCCAGAGAAGAAGAAGGCAC" 210 270
                , Olig "AGGGCAGGTGTGGGTTCTGTCGCAAGATTTAGGCTCCACCTTCTTGTCCACCTTGGTGTT" 270 330
                , Olig "AGGCTTAGGAGGGAACAGAAACACAGAAGGGCCGCCCAGCAGCTCAGGGGCAGGGCAAGG" 330 390
                , Olig "AGACACATCCACCACCACGCAGGTCACCTCAGGCTCTCTGGTGATGTACAGGGTGTCCTT" 390 450
                , Olig "TGCGTTGTGCACCTCCACGCCGTCCACGTACCAGTTGAACTTCACCTCAGGGTCCTCGTG" 450 510
                , Olig "GGTCAGCACAGACACCACTCTGTAGGTAGAGTTGTACTGCTCCTCTCTAGGCTTGGTCTT" 510 570
                , Olig "GGCCTTGTTAGACACCTTGCACTTGTACTCCTTGCCGTTCAGCCAGTCTTGGTGCAGCAC" 570 630
                , Olig "TTGAGGCTCTCTAGGCTGGCCCTTGGCCTTAGAGATGGTCTTCTCGATAGGGGCAGGCAG" 630 690
                , Olig "GCAGGTCAGAGACACTTGGTTCTTGGTCAGCTCGTCTCTAGAAGGAGGCAGGGTGTACAC" 690 750
                , Olig "AGGCTGGCCGTTAGACTCCCACTCCACGGCGATGTCAGAAGGGTAGAAGCCCTTCACCAG" 750 810
                , Olig "GTACAGAAAGAAAGAGCCATCAGAGTCCAGCACAGGAGGGGTGGTCTTGTAGTTGTTCTC" 810 870
                , Olig "CACAGAGCAAGAGAACACGTTGCCTTGCTGCCATCTAGACTTGTCCACGGTCAGCTTAGA" 870 930
                , Olig "CTTGCCAGGAGACAGAGACAGAGACTTCTGGGTGTAGTGGTTGTGCAGGGCCTCGTGCAT" 930 990
                ]
                coords
        let mtx = rnaMatrix oligs
        let newOligs = OligSet
                [ Olig "GCCAGCACCAAGGGCCCCAGCGTGTTTCCTCTGGCCCCTTCTTCTAAGTCTACCTCTGGC" 0 60
                , Olig "GGCACCGCCGCCCTGGGCTGTCTGGTGAAGGATTACTTCCCTGAGCCTGTGACCGTGTCT" 60 120
                , Olig "TGGAACTCTGGCGCCCTGACCTCTGGCGTGCACACCTTCCCTGCCGTGCTGCAGTCTTCT" 120 180
                , Olig "GGCCTGTACTCTCTGTCTTCTGTGGTGACCGTGCCTTCTTCTTCTCTGGGCACCCAGACC" 180 240
                , Olig "TACATCTGCAACGTGAACCACAAGCCTTCTAACACCAAGGTGGACAAGAAGGTGGAGCCT" 240 300
                , Olig "AAATCTTGCGACAGAACCCACACCTGCCCTCCTTGCCCTGCCCCTGAGCTGCTGGGCGGC" 300 360
                , Olig "CCTTCTGTGTTTCTGTTCCCTCCTAAGCCTAAGGACACCCTGTACATCACCAGAGAGCCT" 360 420
                , Olig "GAGGTGACCTGCGTGGTGGTGGATGTGTCTCACGAGGACCCTGAGGTGAAGTTCAACTGG" 420 480
                , Olig "TACGTGGACGGCGTGGAGGTGCACAACGCAAAGACCAAGCCTAGAGAGGAGCAGTACAAC" 480 540
                , Olig "TCTACCTACAGAGTGGTGTCTGTGCTGACCGTGCTGCACCAAGACTGGCTGAACGGCAAG" 540 600
                , Olig "GAGTACAAGTGCAAGGTGTCTAACAAGGCCCTGCCTGCCCCTATCGAGAAGACCATCTCC" 600 660
                , Olig "AAGGCCAAGGGCCAGCCTAGAGAGCCTCAAGTGTACACCCTGCCTCCTTCTAGAGACGAG" 660 720
                , Olig "CTGACCAAGAACCAAGTGTCTCTGACCTGCCTGGTGAAGGGCTTCTACCCTTCTGACATC" 720 780
                , Olig "GCCGTGGAGTGGGAGTCTAACGGCCAGCCTGAGAACAACTACAAGACCACCCCTCCTGTG" 780 840
                , Olig "CTGGACTCTGATGGCTCTTTCTTTCTGTACTCTAAGCTGACCGTGGACAAGTCTAGATGG" 840 900
                , Olig "CAGCAAGGCAACGTGTTCTCTTGCTCTGTGATGCACGAGGCCCTGCACAACCACTACACC" 900 960
                ]
                [ Olig "CTTCACCAGACAGCCCAGGGCGGCGGTGCCGCCAGAGGTAGACTTAGAAGAAGGGGCCAG" 30 90
                , Olig "CACGCCAGAGGTCAGGGCGCCAGAGTTCCAAGACACGGTCACAGGCTCAGGGAAGTAATC" 90 150
                , Olig "GGTCACCACAGAAGACAGAGAGTACAGGCCAGAAGACTGCAGCACGGCAGGGAAGGTGTG" 150 210
                , Olig "AGAAGGCTTGTGGTTCACGTTGCAGATGTAGGTCTGGGTGCCCAGAGAAGAAGAAGGCAC" 210 270
                , Olig "AGGGCAGGTGTGGGTTCTGTCGCAAGATTTAGGCTCCACCTTCTTGTCCACCTTGGTGTT" 270 330
                , Olig "AGGCTTAGGAGGGAACAGAAACACAGAAGGGCCGCCCAGCAGCTCAGGGGCAGGGCAAGG" 330 390
                , Olig "AGACACATCCACCACCACGCAGGTCACCTCAGGCTCTCTGGTGATGTACAGGGTGTCCTT" 390 450
                , Olig "TGCGTTGTGCACCTCCACGCCGTCCACGTACCAGTTGAACTTCACCTCAGGGTCCTCGTG" 450 510
                , Olig "GGTCAGCACAGACACCACTCTGTAGGTAGAGTTGTACTGCTCCTCTCTAGGCTTGGTCTT" 510 570
                , Olig "GGCCTTGTTAGACACCTTGCACTTGTACTCCTTGCCGTTCAGCCAGTCTTGGTGCAGCAC" 570 630
                , Olig "TTGAGGCTCTCTAGGCTGGCCCTTGGCCTTGGAGATGGTCTTCTCGATAGGGGCAGGCAG" 630 690
                , Olig "GCAGGTCAGAGACACTTGGTTCTTGGTCAGCTCGTCTCTAGAAGGAGGCAGGGTGTACAC" 690 750
                , Olig "AGGCTGGCCGTTAGACTCCCACTCCACGGCGATGTCAGAAGGGTAGAAGCCCTTCACCAG" 750 810
                , Olig "GTACAGAAAGAAAGAGCCATCAGAGTCCAGCACAGGAGGGGTGGTCTTGTAGTTGTTCTC" 810 870
                , Olig "CACAGAGCAAGAGAACACGTTGCCTTGCTGCCATCTAGACTTGTCCACGGTCAGCTTAGA" 870 930
                , Olig "CTTGCCAGGAGACAGAGACAGAGACTTCTGGGTGTAGTGGTTGTGCAGGGCCTCGTGCAT" 930 990
                ]
                coords
        let newMtx = rebuildMatrix mtx newOligs
        trace (show newMtx) $ True `shouldBe` True